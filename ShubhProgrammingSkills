#pragma config(Sensor, in1,    gyro,           sensorGyro)
#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftEncoder,    sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  touchSensor,    sensorTouch)
#pragma config(Motor,  port1,           rightBack,     tmotorVex393HighSpeed_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           rightMid,      tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port3,           leftBack,      tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port4,           mobileLift,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           swingArm,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           elevatorLift,  tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           grabber,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           leftFront,     tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port9,           leftMid,       tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          rightFront,    tmotorVex393HighSpeed_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void moveForward(int speed) {
	motor[leftBack] = speed;
	motor[leftMid] = speed;
	motor[leftFront] = speed;
	motor[rightBack] = speed;
	motor[rightMid] = speed;
	motor[rightFront] = speed;
}

void clockwise(int speed) {
	motor[leftBack] = speed;
	motor[leftMid] = speed;
	motor[leftFront] = speed;
	motor[rightBack] = -speed;
	motor[rightMid] = -speed;
	motor[rightFront] = -speed;
}

void counterClock(int speed) {
	motor[rightBack] = speed;
	motor[rightMid] = speed;
	motor[rightFront] = speed;
	motor[leftBack] = -speed;
	motor[leftMid] = -speed;
	motor[leftFront] = -speed;
}

void elevator(int speed, int time){
	motor[elevatorLift] = speed;
	wait1Msec(time);
	motor[elevatorLift] = 0;
}

void mobileGoal(int speed, int time){
	motor[mobileLift] = speed;
	wait1Msec(time);
	motor[mobileLift] = 0;
}

task main()
{
	//Set up sensors - Pre autonomous section
	SensorValue[rightEncoder] = 0;
	SensorType[in1] = sensorNone;
	SensorType[in2] = sensorNone;
	wait1Msec(1000);
	SensorType[in1] = sensorGyro;
	SensorType[in2] = sensorGyro;
	wait1Msec(2000);

	//Reset encoders
	SensorValue[rightEncoder] = 0;
	SensorValue[leftEncoder] = 0;

	//Reset gyro
	SensorValue[gyro] = 0;

	//Raise elevator lift
	elevator(-127, 1000);

	//Lower mobile goal lift
	mobileGoal(127, 1000);

	//Move forward 48 inches
	while (4 * PI * SensorValue[rightEncoder] / 360 < 48) {
		moveForward(127);
	}
	moveForward(0);

	//Raise mobile goal
	mobileGoal(-127, 1000);

	//Lower elevator lift
	elevator(127,1000);

	//Move backward 6 inches
	while (4 * PI * SensorValue[rightEncoder] / 360 < 6) {
		moveForward(-127);
	}
	moveForward(0);

	//Turn clockwise 180 degrees
	while( abs( SensorValue[gyro] ) < 1700) {
		clockwise(127);
	}
	clockwise(0);

	//Reset right encoder
	SensorValue[rightEncoder] = 0;

	//Move forward 40 inches
	while (4 * PI * SensorValue[rightEncoder] / 360 < 40) {
		moveForward(127);
	}
	moveForward(0);

	//Raise elevator lift
	elevator(-127, 1000);

	//Move forward for 2 seconds
	moveForward(127);
	wait1Msec(2000);
	moveForward(0);

	//Lower mobile goal
	mobileGoal(127, 1000);

	//Move backward for 4.5 seconds for next mobile goal placement
	moveForward(-127);
	wait1Msec(4500);
	moveForward(0);

	/// End of 15-sec autonomous

	// Mobile goal #2

	//Raise mobile goal
	mobileGoal(-127, 1000);

	//Lower elevator lift
	elevator(127, 1000);

	//Reset gyro
	SensorValue[gyro] = 0;

	//Turn counter-clockwise
	while( abs( SensorValue[gyro] ) < 1750) {
		counterClock(127);
	}
	counterClock(0);

	//Raise elevator lift
	elevator(-127, 1000);

	//Lower mobile goal
	mobileGoal(127, 1000);

	//Reset right encoder
	SensorValue[rightEncoder] = 0;

	//Move forward 30 inches
	while (4 * PI * SensorValue[rightEncoder] / 360 < 30) {
		moveForward(127);
	}
	moveForward(0);

	//Raise mobile goal
	mobileGoal(-127, 1000);

	//Move backward
	while (4 * PI * SensorValue[rightEncoder] / 360 < 30) {
		moveForward(-127);
	}
	moveForward(0);

	//Turn clockwise
	while( abs( SensorValue[gyro] ) < 1270) {
		clockwise(127);
	}
	clockwise(0);

	//Reset righr encoder
	SensorValue[rightEncoder] = 0;

	//Move forward for 5.5 seconds
	moveForward(127);
	wait1Msec(5500);
	moveForward(0);

	//Lower mobile goal
	mobileGoal(127, 1000);

	//Move backward
	moveForward(-127);
	wait1Msec(1500);
	moveForward(0);

	//Mobile Goal #3---------------

	//Reset gyro
	SensorValue[gyro] = 0;

	//Turn counter-clockwise
	while( abs( SensorValue[gyro] ) < 900) {
		counterClock(127);
	}
	counterClock(0);

	//Raise elevator lift
	elevator(-127, 1000);

	//Lower mobile goal
	mobileGoal(127, 1000);

	//Reset right encoder
	SensorValue[rightEncoder] = 0;

	//Move forward 48 inches
	while (4 * PI * SensorValue[rightEncoder] / 360 < 48) {
		moveForward(127);
	}
	moveForward(0);

	//Raise mobile goal
	mobileGoal(127, 1000);

	//Move backward
	while (4 * PI * SensorValue[rightEncoder] / 360 < 26) {
		moveForward(127);
	}
	moveForward(0);

	//Lower elevator lift
	elevator(127, 1000);

	//Reset gyro
	SensorValue[gyro] = 0;

	//Turn counter-clockwise
	while( abs( SensorValue[gyro] ) < 1600) {
		counterClock(127);
	}
	counterClock(0);

	//Reset right encoder
	SensorValue[rightEncoder] = 0;

	//Move forward
	while (4 * PI * SensorValue[rightEncoder] / 360 < 18) {
		moveForward(127);
	}
	moveForward(0);

	//Raise elevator lift
	elevator(-127, 1000);

	//Move forward
	moveForward(127);
	wait1Msec(1500);
	moveForward(0);

	//Lower mobile goal
	mobileGoal(127, 1000);

	//Move backward
	moveForward(-127);
	wait1Msec(1500);
	moveForward(0);

	//Lower elevator lift
	elevator(127, 1000);

	//Raise mobile goal
	mobileGoal(-127, 1000);

	//Mobile Goal #4----------

	//Reset gyro
	SensorValue[gyro] = 0;

	//Turn counter-clockwise
	while( abs( SensorValue[gyro] ) < 1750) {
		counterClock(127);
	}
	counterClock(0);

	//Raise elevator lift
	elevator(-127, 1000);

	//Lower mobile goal
	mobileGoal(127, 1000);

	//Reset right encoder
	SensorValue[rightEncoder] = 0;

	//Move forward
	while (4 * PI * SensorValue[rightEncoder] / 360 < 33) {
		moveForward(127);
	}
	moveForward(0);

	//Raise mobile goal
	mobileGoal(-127, 1000);

	//Lower elevator lift
	elevator(127, 1000);

	//Reset gyro
	SensorValue[gyro] = 0;

	//Turn counter-clockwise
	while( abs( SensorValue[gyro] ) < 1270) {
		counterClock(127);
	}
	counterClock(0);

	//Raise elevator lift
	elevator(-127, 1000);

	//Move forward
	moveForward(127);
	wait1Msec(5500);
	moveForward(0);

	//Lower mobile goal
	mobileGoal(127, 1000);

	//Move backward
	moveForward(-127);
	wait1Msec(2500);
	moveForward(0);

	//Mobile Goal #5----------------------

	//Reset gyro
	SensorValue[gyro] = 0;

	//Turn 120 degrees counter-clockwise
	while( abs( SensorValue[gyro] ) < 1150) {
		counterClock(127);
	}
	counterClock(0);

	//Reset right encoders
  SensorValue[rightEncoder] = 0;

	//Move forward
	while (4 * PI * SensorValue[rightEncoder] / 360 < 54) {
		moveForward(127);
	}
	moveForward(0);

	//Reset gyro
	SensorValue[gyro] = 0;

	//Turn 90 counter-clockwise
	while( abs( SensorValue[gyro] ) < 800) {
		counterClock(127);
	}
	counterClock(0);

	//Reset right encoder
	SensorValue[rightEncoder] = 0;

	//Move forward
	while (4 * PI * SensorValue[rightEncoder] / 360 < 56) {
		moveForward(127);
	}
	moveForward(0);

	//Reset gyro
	SensorValue[gyro] = 0;

	//Turn counter-clockwise
	while( abs( SensorValue[gyro] ) < 1350) {
		counterClock(127);
	}
	counterClock(0);

	//Raise elevator lift
	elevator(-127, 1000);

	//Lower mobile goal
	mobileGoal(127, 1000);

	//Reset right encoders
	SensorValue[rightEncoder] = 0;

	//Move forward
	while (4 * PI * SensorValue[rightEncoder] / 360 < 10) {
		moveForward(127);
	}
	moveForward(0);

	//Raise mobile goal
	mobileGoal(-127, 1000);
	
	//Lower elevator lift
	elevator(127, 1000);
	
	//Reset gyro
	SensorValue[gyro] = 0;
	
	//Turn clockwise 200 
	while( abs( SensorValue[gyro] ) < 2000) {
		clockwise(127);
	}
	clockwise(0);
	
	//Raise elevator lift
	elevator(-127, 1000);
	
	//Move forward into the 20 point
	moveForward(127);
	wait1Msec(3500);
	moveForward(0);
	
	//Lower mobile goal
	mobileGoal(127, 1000);
	
	//Move Bakcward
	moveForward(-127);
	wait1Msec(2000);
	moveForward(0);
}
