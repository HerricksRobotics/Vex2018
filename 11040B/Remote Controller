#pragma config(Sensor, in1,    liftAngle,      sensorPotentiometer)
#pragma config(Sensor, in2,    gyro,           sensorGyro)
#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl4,  leftEncoder,    sensorQuadEncoder)
#pragma config(Motor,  port1,           rightBack,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           leftBack,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           rightFront,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           leftFront,     tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           rightArm,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           leftArm,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           frontMotor,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           mobileLift,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           mobileLift2,   tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

task main()
{
int leftSpeed;
	int rightSpeed;
	int armBaseSpeed;
	int grabberSpeed;
	int mobileSpeed;
  while (true)
  {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
    // Insert user code here. This is where you use the joystick values to
    // update your motors, etc.
    // ........................................................................

    // Remove this function call once you have "real" code.
    //Controls Right Front Wheel
		if (vexRT[Ch3] > -35 && vexRT[Ch3] < 35)
		{
			rightSpeed = 0;
		}
		else
		{
			rightSpeed = vexRT[Ch3];
		}
		//Controls Left Front Wheel
		if (vexRT[Ch2] > -35 && vexRT[Ch2] < 35)
		{
			leftSpeed = 0;
		}
		else
		{
			leftSpeed = vexRT[Ch2];
		}
		//Controls arm movement
		if (vexRT[Btn6UXmtr2]==1) {
			armBaseSpeed = -60;
			grabberSpeed = 0;
		}
		else if (vexRT[Btn6DXmtr2]==1) {
			armBaseSpeed = 60;
			//grabberSpeed = -30;
		}
		else {
			armBaseSpeed = 0;
			grabberSpeed = 0;
		}
		//Controls pinchers movement
		if (vexRT[Btn8UXmtr2]==1)
		{
			grabberSpeed = 127;
		}
		else if (vexRT[Btn8DXmtr2]==1)
		{
			grabberSpeed = -127;
		}
		else {
			grabberSpeed = 0;
		}
		if (vexRT[Btn5UXmtr2]==1) {
			mobileSpeed = 127;
		}
		else if (vexRT[Btn5DXmtr2]==1) {
			mobileSpeed = -127;
		}
		else {
			mobileSpeed = 0;
		}
		motor[leftFront] = leftSpeed;
		motor[leftBack] = leftSpeed;
		motor[rightFront] = rightSpeed;
		motor[rightBack] = rightSpeed;
		motor[rightArm] = armBaseSpeed;
		motor[leftArm] = armBaseSpeed;
		motor[frontMotor] = grabberSpeed;
		motor[mobileLift] = mobileSpeed;
		motor[mobileLift2] = mobileSpeed;
  }
}
