#pragma config(Sensor, in1,    liftAngle,      sensorPotentiometer)
#pragma config(Sensor, in2,    gyro,           sensorGyro)
#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl4,  leftEncoder,    sensorQuadEncoder)
#pragma config(Motor,  port1,           rightBack,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           leftBack,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           rightFront,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           leftFront,     tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           rightArm,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           leftArm,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           frontMotor,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           mobileLift,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           mobileLift2,   tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void moveForward(int speed) {
	motor[leftFront] = speed;
	motor[leftBack] = speed;
	motor[rightFront] = speed;
	motor[rightBack] = speed;
}

void liftArm(int speed) {

	motor[leftArm] = speed;

	motor[rightArm] = speed;

}

void liftMobileArm(int speed) {

  motor[mobileLift] = speed;

  motor[mobileLift2] = speed;

}

//Code for VEX 11040B

task main()

{
	int leftSpeed;

	int rightSpeed;

	int armBaseSpeed;

	int grabberSpeed;

	int mobileSpeed;

	SensorValue[rightEncoder] = 0;
	SensorValue[leftEncoder] = 0;

	//Keep Grabber on the whole time
	motor[frontMotor] = -127;

	//Move Arm back for Preload
	liftArm(-80);
	wait1Msec(1200);
	liftArm(0);
	//Lower Mobile Goal Lift

	liftMobileArm(-127);
	wait1Msec(1500);
	liftMobileArm(0);

	//Move Forward Towards Mobile Goal
	while (4 * PI * (SensorValue[rightEncoder] / 360) < 32) {
		moveForward(80);
	}
	moveForward(0);

	//Raise Mobile Goal Lift
	liftMobileArm(127);
	wait1Msec(1500);
	liftMobileArm(0);

	//Stack Preload
	liftArm(80);
	wait1Msec(1000);
	liftArm(0);

	//Move Backwards
	while (4 * PI * (SensorValue[rightEncoder] / 360) > 0) {

		if (SensorValue[rightEncoder] > SensorValue[leftEncoder] ) {
			motor[leftFront] = 50;
			motor[leftBack] = 50;
			motor[rightFront] = 0;
			motor[rightBack] = 0;
		}
		else {
			moveForward(-80);
		}
	}
	moveForward(0);
	SensorValue[gyro] = 0;
	//Turn right by 120 degrees
	while (abs(SensorValue[gyro]) < 1350) {
		motor[rightFront] = -50;
		motor[rightBack] = -50;
		motor[leftFront] = 50;
		motor[leftBack] = 50;
	}
	motor[rightFront] = 0;
	motor[rightBack] = 0;
	motor[leftFront] = 0;
	motor[leftBack] = 0;

	liftArm(-80);
	wait1Msec(1000);
	liftArm(0);

	liftMobileArm(-127);
	wait1Msec(1500);
	liftMobileArm(0);

	moveForward(-100);
	wait1Msec(2000);
	moveForward(0);

	//

	SensorValue[gyro] = 0;
	while(abs(SensorValue[gyro]) < 900) {
		//Turn right
		motor[leftFront] = 100;
		motor[leftBack] = 100;
		motor[rightFront] = 0;
		motor[rightBack] = 0;
	}
	/*

		SensorValue[gyro] = 0;
	while(abs(SensorValue[gyro]) < 900) {
		//Turn right
		motor[leftFront] = 100;
		motor[leftBack] = 100;
		motor[rightFront] = 0;
		motor[rigthBack] = 0;
	}

	moveForward(127);
	wait1Msec(5500);
	moveForward(0);

	liftArm(-100);
	wait1Msec(2000);
	liftArm(0);

	motor[frontMotor] = -127;
	wait1Msec(1500);
	motor[frontMotor] = 0;

	motor[frontMotor] = 127;
	wait1Msec(1500);
	motor[frontMotor] = 0;

	SensorValue[gyro] = 0;
	while(abs(SensorValue[gyro]) < 450) {
		//Turn right
		motor[leftFront] = 100;
		motor[leftBack] = 100;
		motor[rightFront] = 0;
		motor[rigthBack] = 0;
	}

	liftMobileArm(-100);
	wait1Msec(1000);
	liftMobileArm(0);

	moveForward(50);
	wait1Msec(1500);
	moveForward(0);

	liftMobileArm(100);
	wait1Msec(1500);
	liftMobileArm(0);

	SensorValue[gyro] = 0;
	while(abs(SensorValue[gyro]) < 550) {
		//Turn right
		motor[leftFront] = 100;
		motor[leftBack] = 100;
		motor[rightFront] = 0;
		motor[rigthBack] = 0;
	}

	moveForward(127);	
	wait1Msec(3000);
	moveForward(0);

	SensorValue[gyro] = 0;
	while(abs(SensorValue[gyro]) < 900) {
		//Turn right
		motor[leftFront] = 100;
		motor[leftBack] = 100;
		motor[rightFront] = 0;
		motor[rigthBack] = 0;
	}


	liftMobileArm(-127); 
	wait1Msec(1000);
	liftMobileArm(0);
	
	moveForward(-127);
	wait1Msec(1000);
	liftMobileArm(0);

	liftMobileArm(127);
	wait1Msec(1000);
	liftMobileArm(0);

	//Removed code that moved robot too far back

	SensorValue[gyro] = 0;
	while(abs(SensorValue[gyro]) < 900) {
		//Turn left
		motor[leftFront] = 0;
		motor[leftBack] = 0;		//Robot turned in wrong direction previously
		motor[rightFront] = 100;
		motor[rigthBack] = 100;
	}

	moveForward(127);
	wait1Msec(4000);
	moveForward(0);

	liftMobileArm(-127);
	wait1Msec(1500);

	motor[frontMotor] = -127;
	wait1Msec(1000);
	motor[frontMotor] = = 0;

	motor[frontMotor] = 127;
	wait1Msec(1000);
	motor[frontMotor] = 127;

	liftMobileArm(-127);



	*/


	/*
	wait1Msec(1000);

	//Moves forward
	moveForward(127);

	wait1Msec(4000);
	moveForward(0);

	motor[leftFront] = 100;
	motor[leftBack] = 100;
	motor[rightFront] = 0;
	motor[rigthBack] = 0;

	wait1Msec(1000);

	liftMobileArm(-120);
	wait1Msec(1500);
	liftMobileArm(0);

	liftMobileArm(120);
	wait1Msec(1500);

	while(abs(SensorValue[gyro]) < 900) {
		//Turn left
		motor[leftFront] = 0;
		motor[leftBack] = 0;
		motor[rightFront] = 100;
		motor[rigthBack] = 100;
	}
	moveForward (60);
	wait1Msec(500);


	*/

}
