#pragma config(Sensor, in1,    liftAngle,      sensorPotentiometer)
#pragma config(Sensor, in2,    gyro,           sensorGyro)
#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl4,  leftEncoder,    sensorQuadEncoder)
#pragma config(Motor,  port1,           rightBack,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           leftBack,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           rightFront,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           leftFront,     tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           rightArm,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           leftArm,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           frontMotor,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           mobileLift,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           mobileLift2,   tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void moveForward(int speed) {
	motor[leftFront] = speed;
	motor[leftBack] = speed;
	motor[rightFront] = speed;
	motor[rightBack] = speed;
}

void liftArm(int speed) {
	motor[leftArm] = speed;
	motor[rightArm] = speed;
}

void liftMobileArm(int speed) {
  motor[mobileLift] = speed;
  motor[mobileLift2] = speed;
}

void dreamCatcher(int speed){
	motor[frontMotor] = speed;
}
//Code for VEX 11040B

task main()
{
	while (true)
	{

		//Gyro Setup
		SensorType[in2] = sensorNone;
		wait1Msec(1000);

		SensorType[in2] = sensorGyro;
		wait1Msec(2000);

		//Reset encoder values
		SensorValue[rightEncoder] = 0;
		SensorValue[leftEncoder] = 0;

		//Keeps preload in at all times
		dreamCatcher(127);

		//Move arm backward
		liftArm(-127);
		wait1Msec(2500);
		liftArm(0);

		//Move forward 3 inches
		int tickGoal = 42 * 3;
		while (SensorValue[rightEncoder] < tickGoal)
		{
			moveForward(127);
		}
		moveForward(0);

		//Turn 95 degrees to the right
		int degrees10 = -850;
		while (abs(SensorValue[in2]) < degrees10)
			{
				moveForward(127);
			}
		moveForward(0);

		//Lowers Mobile Goal
		liftMobileArm(-127);
		wait1Msec(2000);
		liftMobileArm(0);

		//Move Forward Towards MobileGoal #1
		tickGoal = 42 * 48;
		while (SensorValue[rightEncoder] < tickGoal)
		{
			moveForward(127);
		}
		moveForward(0);

		//Raise Mobile Goal
		liftMobileArm(127);
		wait1Msec(2000);
		liftMobileArm(0);

		//Stack preload onto MobileGoal #1
		liftArm(127);
		wait1Msec(2500);
		liftArm(0);

		//Releases preload onto MobileGoal #1
		dreamCatcher(-127);
		wait1Msec(2500);
		dreamCatcher(0);

		//Move Arm Back
		liftArm(127);
		wait1Msec(2500);
		liftArm(0);

		//Move backwards away from the cones
		tickGoal = 42 * 48;
		while(SensorValue[rightEncoder] < tickGoal)
		{
			moveForward(-127);
		}
		moveForward(0);

		//Turn Left 200 degrees
		degrees10 = 2000;
		while(abs(SensorValue[in2]) < degrees10)
		{
			moveForward(127);
		}
		moveForward(0);

		//Moves Forward towards 20-point zone
		tickGoal = 42 * 48;
		while (SensorValue[rightEncoder] < tickGoal)
		{
			moveForward(127);
		}
		moveForward(0);

		//Releases Mobile Goal into 20-point zone
		liftMobileArm(-127);
		wait1Msec(2000);
		liftMobileArm(0);

		//Moves Backward out of the scoring zones
		tickGoal = 42 * 38;
		while (SensorValue[rightEncoder] < tickGoal)
		{
			moveForward(-127);
		}
		moveForward(0);
	}
}
