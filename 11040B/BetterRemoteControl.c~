#pragma config(Sensor, in1,    liftAngle,      sensorPotentiometer)
#pragma config(Motor,  port1,           rightBack,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           leftBack,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           rightFront,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           leftFront,     tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           rightArm,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           leftArm,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           frontMotor,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           mobileLift,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           mobileLift2,   tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

void moveForward(int speed) {
	motor[leftFront] = speed;
	motor[leftBack] = speed;
	motor[rightFront] = speed;
	motor[rightBack] = speed;
}

void liftArm(int speed) {
	motor[leftArm] = speed;
	motor[rightArm] = speed;
}

//Code for VEX 11040B
task main()
{
	int leftSpeed;
	int rightSpeed;
	int armBaseSpeed;
	int grabberSpeed;
	int mobileSpeed;
	//Push Yellow Cone back a bit
	moveForward(-50);
	wait1Msec(800);
	moveForward(0);
	//Move forward a bit
	moveForward(50);
	wait1Msec(1000);
	moveForward(0);
	//Move Arm back for Preload
	liftArm(-80);
	wait1Msec(1000);
	liftArm(0);
	//Open Pincher and move into yellow cone
	motor[frontMotor] = -127;
	moveForward(-50);
	wait1Msec(200);
	moveForward(0);
	motor[frontMotor] = 0;
	//Move Forward Towards Mobile Goal
	moveForward(80);
	wait1Msec(3000);
	moveForward(0);
	//Stop
	while (true)
	{
		//Controls Right Front Wheel
		if (vexRT[Ch3] > -35 && vexRT[Ch3] < 35)
		{
			rightSpeed = 0;
		}
		else
		{
			rightSpeed = vexRT[Ch3];
		}
		//Controls Left Front Wheel
		if (vexRT[Ch2] > -35 && vexRT[Ch2] < 35)
		{
			leftSpeed = 0;
		}
		else
		{
			leftSpeed = vexRT[Ch2];
		}
		//Controls arm movement
		if (vexRT[Btn6UXmtr2]==1) {
			armBaseSpeed = -60;
			grabberSpeed = 0;
		}
		else if (vexRT[Btn6DXmtr2]==1) {
			armBaseSpeed = 60;
			//grabberSpeed = -30;
		}
		else {
			armBaseSpeed = 0;
			grabberSpeed = 0;
		}
		//Controls pinchers movement
		if (vexRT[Btn8UXmtr2]==1)
		{
			grabberSpeed = 30;
		}
		else if (vexRT[Btn8DXmtr2]==1)
		{
			grabberSpeed = -30;
		}
		else {
			grabberSpeed = 0;
		}
		if (vexRT[Btn5UXmtr2]==1) {
			mobileSpeed = 127;
		}
		else if (vexRT[Btn5DXmtr2]==1) {
			mobileSpeed = -127;
		}
		else {
			mobileSpeed = 0;
		}
		motor[leftFront] = leftSpeed;
		motor[leftBack] = leftSpeed;
		motor[rightFront] = rightSpeed;
		motor[rightBack] = rightSpeed;
		motor[rightArm] = armBaseSpeed;
		motor[leftArm] = armBaseSpeed;
		motor[frontMotor] = grabberSpeed;
		motor[mobileLift] = mobileSpeed;
		motor[mobileLift2] = mobileSpeed;
	}
}
